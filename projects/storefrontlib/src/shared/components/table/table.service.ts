import { Injectable, isDevMode } from '@angular/core';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';
import { BREAKPOINT } from '../../../layout/config/layout-config';
import { TableConfig } from './config/table.config';
import { TableStructure, TableStructureConfiguration } from './table.model';

/**
 * Responsive table service.
 *
 * The `TableService` is used to generate a `TableStructure` based on configuration. The table
 * structure configuration allows for breakpoint specific configuration, so that the table
 * experience can be differentiated various screen sizes.
 *
 * The table structure configuration is driven by a table type. The various supported
 * table types are exposed in feature libraries.
 *
 * If there is no table configuration for the given type found, a table header structure
 * is generated based on the actual data or randomly (in case no data is passed in) by
 * generating 5 headers. In case of a generated header, we warn the developer in devMode that
 * there is no configuration available.
 */
@Injectable({
  providedIn: 'root',
})
export class TableService {
  constructor(
    protected breakpointService: BreakpointService,
    protected config: TableConfig
  ) {}

  /**
   * Builds the table structure. The table structure can be created by the help of
   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,
   * so that the table headers can be defined.
   */
  buildStructure(
    tableType: string,
    data$?: Observable<any>
  ): Observable<TableStructure> {
    if (this.hasTableConfig(tableType)) {
      return this.buildStructureFromConfig(tableType);
    } else {
      if (data$) {
        return this.buildStructureFromData(tableType, data$);
      } else {
        return this.buildRandomStructure(tableType);
      }
    }
  }

  /**
   * Returns the table structure by configuration. The configuration can be
   * breakpoint-driven, which means that an alternative header structure can
   * be created per screen size.
   *
   * The breakpoint is resolved by teh `BreakpointService`.
   */
  protected buildStructureFromConfig(type: string): Observable<TableStructure> {
    return this.breakpointService.breakpoint$.pipe(
      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))
    );
  }

  /**
   * This method generates a table structure by the help of the first data row.
   */
  protected buildStructureFromData(
    type: string,
    data$: Observable<any>
  ): Observable<TableStructure> {
    this.warn(
      `No table configuration found to render table with type "${type}". The table header for "${type}" is generated by the help of the first data item`
    );
    return data$.pipe(
      map((data: any[]) => {
        const fields = Object.keys(data?.[0]).map((key) => key);
        return { type, fields } as TableStructure;
      })
    );
  }

  /**
   * As a last resort, the table structure is randomly created. We add 5 unknown headers
   * and use the `hideHeader` to avoid the unknown headers to be rendered.
   */
  protected buildRandomStructure(type: string): Observable<TableStructure> {
    this.warn(
      `No data available for "${type}", a random structure is generated (with hidden table headers).`
    );

    return of({
      type,
      fields: ['unknown', 'unknown', 'unknown', 'unknown', 'unknown'],
      options: {
        hideHeader: true,
      },
    });
  }

  /**
   * Finds all applicable table configuration for the given type and breakpoint.
   * The default table configuration is merged with all relevant breakpoint
   * configurations.
   *
   * This allows to have some default configurations that apply to all screens, and
   * add configuration options for some screens.
   */
  protected getTableConfig(
    type: string,
    breakpoint: BREAKPOINT
  ): TableStructureConfiguration {
    if (!this.config.table?.[type]) {
      return null;
    }

    const relevant = this.findRelevantBreakpoints(breakpoint);

    const closestBreakpoint = [...relevant]
      .reverse()
      .find((br) => !!this.config.table[type][br]?.fields);
    const fields =
      this.config.table[type][closestBreakpoint]?.fields ||
      this.config.table[type].fields;

    // TODO: get field config from closest breakpoint config
    // const fields = this.config.table[type].fields;

    // add all default table configurations
    let options = this.config.table[type].options || {};

    // merge relevant breakpoint configurations
    relevant.forEach((br) => {
      options = Object.assign(options, this.config.table[type]?.[br]?.options);
    });

    return { fields, options };
  }

  /**
   * Finds all the breakpoints can contribute to the table configuration, from small
   * to current.
   *
   * In case the current breakpoint would be `MD`, this returns `[XS,SM,MD]`.
   */
  protected findRelevantBreakpoints(breakpoint: BREAKPOINT): BREAKPOINT[] {
    const current = this.breakpointService.breakpoints.indexOf(breakpoint);
    return this.breakpointService.breakpoints.slice(0, current + 1);
  }

  protected hasTableConfig(tableType: string): boolean {
    return !!this.config.table?.[tableType];
  }

  /**
   * Prints a convenient message in the console to increase developer experience.
   */
  private warn(message) {
    if (isDevMode) {
      console.warn(message);
    }
  }
}
